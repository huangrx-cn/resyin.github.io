<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://resyin.github.io</id>
    <title>HUANG RESYIN</title>
    <updated>2020-02-18T01:08:18.360Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://resyin.github.io"/>
    <link rel="self" href="https://resyin.github.io/atom.xml"/>
    <subtitle>Do something.</subtitle>
    <logo>https://resyin.github.io/images/avatar.png</logo>
    <icon>https://resyin.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, HUANG RESYIN</rights>
    <entry>
        <title type="html"><![CDATA[基于 Mock.js 的前端开发指南]]></title>
        <id>https://resyin.github.io/post/mockjs-usage/</id>
        <link href="https://resyin.github.io/post/mockjs-usage/">
        </link>
        <updated>2020-02-17T04:51:40.000Z</updated>
        <content type="html"><![CDATA[<h2 id="关于-mockjs">关于 Mock.js</h2>
<p><a href="http://mockjs.com/">Mock.js</a> 能做什么？</p>
<ul>
<li>能生成随机数据</li>
<li>能拦截 Ajax 请求</li>
</ul>
<p>Mock.js 有哪些特点？</p>
<ul>
<li>前后端分离<br>
让前端工程师独立于后端进行开发。</li>
<li>低耦合<br>
无需修改既有代码，即可拦截 Ajax 请求，返回模拟的响应数据。</li>
<li>数据类型多样<br>
支持生成随机的文本、数字、布尔值、日期、邮箱、链接、图片、颜色等。</li>
<li>增加单元测试的真实性<br>
通过随机数据，模拟各种场景。</li>
<li>方便扩展<br>
支持扩展更多数据类型，支持自定义函数和正则。</li>
<li>简单易用</li>
</ul>
<p><strong>基于以上特点，Mock.js 被广泛应用于前端开发中，以保证开发效率与进度。</strong></p>
<h2 id="安装">安装</h2>
<p>Mock.js 允许多种安装方式：</p>
<p><strong>浏览器引入</strong></p>
<p><code>&lt;script type=&quot;text/javascript&quot; src=&quot;http://mockjs.com/dist/mock.js&quot;&gt;&lt;/script&gt;</code></p>
<p><strong>使用 npm 或 yarn 安装</strong></p>
<ul>
<li><code>$ npm install mockjs --save</code></li>
<li><code>$ yarn add mockjs</code></li>
</ul>
<h2 id="拦截-ajax-请求">拦截 Ajax 请求</h2>
<p>以 <a href="https://cli.vuejs.org/">Vue CLI</a> 生成的项目为例，安装 <a href="(https://github.com/axios/axios)">Axios</a> 发送 Ajax 请求。</p>
<p><strong>引用 Mock.js</strong></p>
<p>安装完成 Mock.js 后，在项目 src 目录下新建 mock 目录及 index.js 文件，引用 Mock.js：</p>
<pre><code class="language-js">// in src/mock/index.js
import Mock from &quot;mockjs&quot;;
</code></pre>
<p>将 mock 配置关联到项目中：</p>
<pre><code class="language-js">// in src/main.js
import &quot;./mock&quot;;
// 将 Axios 挂载到 Vue 原型中，以便在单文件组件中以 this.$http 使用
import axios from &quot;axios&quot;;
Vue.prototype.$http = axios;
</code></pre>
<p><strong>使用 <a href="https://github.com/nuysoft/Mock/wiki/Mock.mock()">Mock.mock()</a></strong></p>
<p><code>Mock.mock( rurl?, rtype?, template|function( options ) )</code></p>
<ul>
<li><code>rurl</code><br>
可选参数，表示需要拦截的 Ajax URL，可以是 URL 字符串或 URL 正则。<br>
例如 //domain/list.json/、'/domian/list.json'。</li>
<li><code>rtype</code><br>
可选参数，表示需要拦截的 Ajax 请求类型。<br>
例如 GET、POST、PUT、DELETE 等。</li>
<li><code>template</code><br>
可选参数，表示数据模板，可以是对象或字符串。</li>
<li><code>function(options)</code><br>
可选参数，表示用于生成响应数据的函数。
<ul>
<li><code>options</code><br>
指向本次请求的 Ajax 选项集，含有 url、type 和 body 三个属性，参见 XMLHttpRequest 规范。</li>
</ul>
</li>
</ul>
<p>假设业务场景是获取一段资讯列表，网络请求 URL 为 /api/news，类型为 get，拦截函数为：</p>
<pre><code class="language-js">// in src/mock/index.js
import Mock from &quot;mockjs&quot;;

Mock.mock(&quot;/api/news&quot;, &quot;get&quot;, {
    code: &quot;OK&quot;,
    results: [
        {
            id: &quot;1&quot;,
            title: &quot;前端组件设计原则&quot;,
            img:
                &quot;https://user-gold-cdn.xitu.io/2019/1/24/16880541998cbc09?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;,
            publishedAt: &quot;2018-11-02&quot;,
            author: &quot;Andrew Dinihan&quot;,
            url: &quot;https://juejin.im/post/5c49cff56fb9a049bd42a90f&quot;
        },
        {
            id: &quot;2&quot;,
            title: &quot;正则全攻略使用手册&quot;,
            img: &quot;https://segmentfault.com/img/bVbnRSc?w=650&amp;h=255&quot;,
            publishedAt: &quot;2019-01-28&quot;,
            author: &quot;Croc_wend&quot;,
            url: &quot;https://segmentfault.com/a/1190000018042746&quot;
        }
    ]
});
</code></pre>
<p>网络请求方法：</p>
<pre><code class="language-js">// in any.vue
async getNews() {
    const { data: res } = await this.$http({ url: &quot;/api/news&quot; });
    console.log(&quot;get&quot;, res);
}
</code></pre>
<p>控制台中可见，响应数据为编写的测试数据，至此 Mock.js 拦截了 Ajax 请求。</p>
<h2 id="生成随机数据">生成随机数据</h2>
<p>Mock.js 提供了多种数据类型：</p>
<ul>
<li>Base
<ul>
<li>boolean 布尔类型</li>
<li>natural  自然数（大于等于0的整数）</li>
<li>integer 整数</li>
<li>float 浮点数</li>
<li>character 字符</li>
<li>string 字符串</li>
<li>range 整数区间</li>
</ul>
</li>
<li>Date
<ul>
<li>date 日期</li>
<li>time 时间</li>
<li>datetime 日期时间</li>
<li>now 当前日期时间</li>
</ul>
</li>
<li>Image
<ul>
<li>image 图片地址</li>
<li>dataImage 图片 Base64</li>
</ul>
</li>
<li>Color
<ul>
<li>color 16进制颜色值</li>
<li>hex 16进制颜色值</li>
<li>rgb rgb颜色值</li>
<li>rgba rgba颜色值</li>
<li>hsl hsl颜色值</li>
</ul>
</li>
<li>Text
<ul>
<li>paragraph 一段英文</li>
<li>cparagraph 一段中文</li>
<li>sentence 一句英文（首字母大写）</li>
<li>csentence 一句中文</li>
<li>word 一个英文单词</li>
<li>cword 一个中文字</li>
<li>title 一个英文标题（所有字母大写）</li>
<li>ctitle 一个中文标题</li>
</ul>
</li>
<li>Name
<ul>
<li>first 英文名</li>
<li>last 英文姓</li>
<li>name 英文姓名</li>
<li>cfirst 中文姓</li>
<li>clast 中文名</li>
<li>cname 中文姓名</li>
</ul>
</li>
<li>Web
<ul>
<li>url URL</li>
<li>protocol 协议</li>
<li>domain 域名</li>
<li>tld 顶级域名</li>
<li>email 邮件地址</li>
<li>ip IP 地址</li>
</ul>
</li>
<li>Address
<ul>
<li>region 中国区域</li>
<li>province 中国省、直辖市、自治区、特别行政区</li>
<li>city 中国城市</li>
<li>county 中国县</li>
<li>zip 邮政编码</li>
</ul>
</li>
<li>Helper
<ul>
<li>capitalize 把字符串的第一个字母转换为大写</li>
<li>upper 把字符串转换为大写</li>
<li>lower 把字符串转换为小写</li>
<li>pick 从数组中随机选取一个元素</li>
<li>shuffle 打乱数组中元素的顺序</li>
</ul>
</li>
<li>Miscellaneous
<ul>
<li>guid UUID</li>
<li>id 18位身份证号</li>
<li>increment 自增整数</li>
</ul>
</li>
</ul>
<p>使用 <code>@</code> 符号与以上任一数据类型的生成函数名相结合，即可组成占位符，在 Mock.mock() 的 template 中替换固定字符串，生成随机字符串。</p>
<p>速查以上数据类型，改写拦截函数：</p>
<pre><code class="language-js">// in src/mock/index.js
import Mock from &quot;mockjs&quot;;

Mock.mock(&quot;/api/news&quot;, &quot;get&quot;, {
    code: &quot;OK&quot;,
    results: [
        {
            id: &quot;@guid&quot;, // 生成 UUID
            title: &quot;@ctitle(3,5)&quot;, // 生成 3-5 字的中文标题
            img: &quot;@dataImage('200x100')&quot;, // 生成 200px*100px 的图片 Base64
            publishedAt: &quot;@date('yyyy-MM-dd')&quot;, // 生成 yyyy-MM-dd 格式的日期
            author: &quot;@name(true)&quot;, // 生成英文姓名
            url: &quot;@url('http')&quot; // 生成 http 协议的 URL
        }
    ]
});
</code></pre>
<h2 id="语法规范">语法规范</h2>
<p>Mock.js 的语法规范包括两部分：</p>
<ul>
<li>数据占位符定义规范（Data Placeholder Definition，DPD）</li>
<li>数据模板定义规范（Data Template Definition，DTD）</li>
</ul>
<p>上一节中使用的 <code>@guid</code> 等占位符属于 Mock.js 语法规范的数据占位符定义规范； 数据模板定义规范则定义 Mock.mock() template 内属性的最终值。</p>
<p>属性由属性名、生成规则、属性值组成：</p>
<pre><code class="language-js">Mock.mock({
    // 属性名|生成规则:属性值
    'name|rule': value
});
</code></pre>
<p>其中：</p>
<ul>
<li>属性名和生成规则之间用竖线 <code>|</code> 分隔</li>
<li>生成规则是可选参数</li>
<li>生成规则有 7 种格式：
<ul>
<li><code>'name|min-max': value</code></li>
<li><code>'name|count': value</code></li>
<li><code>'name|min-max.dmin-dmax': value</code></li>
<li><code>'name|min-max.dcount': value</code></li>
<li><code>'name|count.dmin-dmax': value</code></li>
<li><code>'name|count.dcount': value</code></li>
<li><code>'name|+step': value</code></li>
</ul>
</li>
<li>属性值的类型影响生成规则
<ul>
<li>String
<ul>
<li><code>'name|min-max': string</code> 通过重复 <code>string</code> 生成一个字符串，重复次数大于等于 <code>min</code>，小于等于 <code>max</code></li>
<li><code>'name|count': string</code> 通过重复 <code>string</code> 生成一个字符串，重复次数等于 <code>count</code></li>
</ul>
</li>
<li>Number
<ul>
<li><code>'name|+1': number</code> 属性值自动加 1，初始值为 <code>number</code></li>
<li><code>'name|min-max': number</code> 生成一个大于等于 <code>min</code>、小于等于 <code>max</code> 的整数，属性值 <code>number</code> 只是用来确定类型</li>
<li><code>'name|min-max.dmin-dmax': number</code> 生成一个浮点数，整数部分大于等于 <code>min</code>、小于等于 <code>max</code>，小数部分保留 <code>dmin</code> 到 <code>dmax</code> 位</li>
</ul>
</li>
<li>Boolean
<ul>
<li><code>'name|1': boolean</code> 随机生成一个布尔值，值为 <code>true</code> 的概率是 1/2，值为 <code>false</code> 的概率同样是 1/2</li>
<li><code>'name|min-max': value</code> 随机生成一个布尔值，值为 value 的概率是  <code>min / (min + max)</code>，值为  <code>!value</code> 的概率是  <code>max / (min + max)</code></li>
</ul>
</li>
<li>Object
<ul>
<li><code>'name|count': object</code> 从属性值  <code>object</code> 中随机选取  <code>count</code> 个属性</li>
<li><code>'name|min-max': object</code>从属性值  <code>object</code> 中随机选取  <code>min</code> 到  <code>max</code> 个属性</li>
</ul>
</li>
<li>Array
<ul>
<li><code>'name|1': array</code> 从属性值 array 中随机选取 1 个元素，作为最终值</li>
<li><code>'name|+1': array</code> 从属性值 array 中顺序选取 1 个元素，作为最终值</li>
<li><code>'name|min-max': array</code> 通过重复属性值 <code>array</code> 生成一个新数组，重复次数大于等于 <code>min</code>，小于等于 <code>max</code></li>
<li><code>'name|count': array</code> 通过重复属性值 <code>array</code> 生成一个新数组，重复次数为 <code>count</code></li>
</ul>
</li>
<li>Function
<ul>
<li>执行函数 <code>function</code>，取其返回值作为最终的属性值，函数的上下文为属性 <code>'name'</code> 所在的对象</li>
</ul>
</li>
<li>RegExp
<ul>
<li>根据正则表达式 regexp 反向生成可以匹配它的字符串。用于生成自定义格式的字符串。</li>
</ul>
</li>
</ul>
</li>
<li>属性值中可以含有占位符</li>
<li>属性值还指定了最终值的初始值和类型</li>
</ul>
<p>回到项目中。业务场景是获取一段资讯列表，但上一节生成的随机数据只有 1 项，此时使用数据模板定义规范的属性生成规则，将 1 项目变为多项：</p>
<pre><code class="language-js">// in src/mock/index.js
import Mock from &quot;mockjs&quot;;

Mock.mock(&quot;/api/news&quot;, &quot;get&quot;, {
    code: &quot;OK&quot;,
    // 数组内，随机生产 5-10 个对象
    &quot;results|5-10&quot;: [
        {
            id: &quot;@guid&quot;, // 生成 UUID
            title: &quot;@ctitle(3,5)&quot;, // 生成 3-5 字的中文标题
            img: &quot;@dataImage('200x100')&quot;, // 生成 200px*100px 的图片 Base64
            publishedAt: &quot;@date('yyyy-MM-dd')&quot;, // 生成 yyyy-MM-dd 格式的日期
            author: &quot;@name(true)&quot;, // 生成英文姓名
            url: &quot;@url('http')&quot; // 生成 http 协议的 URL
        }
    ]
});
</code></pre>
<h2 id="增删改查">增删改查</h2>
<p>除了拦截 <code>GET</code> 请求，Mock.js 同样支持 <code>POST</code> 、<code>DELETE</code>、<code>PUT</code> 请求：</p>
<p><strong>拦截 POST 请求</strong></p>
<pre><code class="language-js">// in src/mock/index.js
Mock.mock(&quot;/api/news&quot;, &quot;post&quot;, opts =&gt; {
    let result = JSON.parse(opts.body);
    result.id = Mock.Random.guid();
    return {
        code: &quot;OK&quot;,
        result
    };
});
</code></pre>
<pre><code class="language-js">// in any.vue
async onCreate() {
    const { data: res } = await this.$http({
    url: `/api/news`,
    method: &quot;post&quot;,
    data: {
        title: &quot;前端组件设计原则&quot;,
        img:
        &quot;https://user-gold-cdn.xitu.io/2019/1/24/16880541998cbc09?imageView2/0/w/1280/h/960/format/webp/ignore-error/1&quot;,
        publishedAt: &quot;2018-11-02&quot;,
        author: &quot;Andrew Dinihan&quot;,
        url: &quot;https://juejin.im/post/5c49cff56fb9a049bd42a90f&quot;
    }
    });
    console.log(&quot;post&quot;, res);
},
</code></pre>
<p><strong>拦截 DELETE 请求</strong></p>
<p>通常 Delete 请求会将 ID 作为 Path 参数放在 URL 中传递，此时需要使用正则表达式匹配 URL，并获取 Path 参数。</p>
<pre><code class="language-js">// in src/mock/index.js
Mock.mock(/\/api\/news/, &quot;delete&quot;, opts =&gt; {
    const pathArray = /\/api\/news\/([\w\\-]+)/.exec(opts.url);
    const id = pathArray[1];
    return {
        code: &quot;OK&quot;,
        result: { id }
    };
});
</code></pre>
<pre><code class="language-js">// in any.vue
async onDelete(news) {
    const { data: res } = await this.$http({
        url: `/api/news/${news.id}`,
        method: &quot;delete&quot;
    });
    console.log(&quot;delete&quot;, res);
},
</code></pre>
<p><strong>拦截 PUT 请求</strong></p>
<p>与 Delete 拦截方式一致。</p>
<pre><code class="language-js">// in src/mock/index.js
Mock.mock(/\/api\/news/, &quot;put&quot;, opts =&gt; {
    const pathArray = /\/api\/news\/([\w\\-]+)/.exec(opts.url);
    const id = pathArray[1];
    let result = JSON.parse(opts.body);
    result.id = id;
    return {
        code: &quot;OK&quot;,
        result
    };
});
</code></pre>
<pre><code class="language-js">// in any.vue
async onUpdate(news) {
    const { data: res } = await this.$http({
    url: `/api/news/${news.id}`,
    method: &quot;put&quot;,
    data: {
        title: &quot;正则全攻略使用手册&quot;,
        img: &quot;https://segmentfault.com/img/bVbnRSc?w=650&amp;h=255&quot;,
        publishedAt: &quot;2019-01-28&quot;,
        author: &quot;Croc_wend&quot;,
        url: &quot;https://segmentfault.com/a/1190000018042746&quot;
    }
    });
    console.log(&quot;update&quot;, res);
}
</code></pre>
<h2 id="关联-mock-数据">关联 Mock 数据</h2>
<p>上一节中的增删改查操作虽然在 Ajax 请求时被拦截，但是彼此间并无关联，数据并无变更。此时可以将 4 者关联（该节与 Mock.js 无关，纯粹的 JavaScript 操作）。</p>
<pre><code class="language-js">import Mock from &quot;mockjs&quot;;

let ret = Mock.mock({
  code: &quot;OK&quot;,
  &quot;results|5-10&quot;: [
    {
      id: &quot;@guid&quot;, // 生成 UUID
      title: &quot;@ctitle(3,5)&quot;, // 生成 3-5 字的中文标题
      img: &quot;@dataImage('200x100')&quot;, // 生成 200px*100px 的图片 Base64
      publishedAt: &quot;@date('yyyy-MM-dd')&quot;, // 生成 yyyy-MM-dd 格式的日期
      author: &quot;@name(true)&quot;, // 生成英文姓名
      url: &quot;@url('http')&quot; // 生成 http 协议的 URL
    }
  ]
});

Mock.mock(&quot;/api/news&quot;, &quot;get&quot;, () =&gt; {
  return ret;
});

Mock.mock(&quot;/api/news&quot;, &quot;post&quot;, opts =&gt; {
  let result = JSON.parse(opts.body);
  result.id = Mock.Random.guid();
  ret.results.push(result);
  return ret;
});

Mock.mock(/\/api\/news/, &quot;delete&quot;, opts =&gt; {
  const pathArray = /\/api\/news\/([\w\\-]+)/.exec(opts.url);
  const id = pathArray[1];
  ret.results = ret.results.filter(val =&gt; {
    return val.id != id;
  });
  return ret;
});

Mock.mock(/\/api\/news/, &quot;put&quot;, opts =&gt; {
  const pathArray = /\/api\/news\/([\w\\-]+)/.exec(opts.url);
  const id = pathArray[1];
  let result = JSON.parse(opts.body);
  ret.results = ret.results.map(val =&gt; {
    return val.id === id ? result : val;
  });
  return ret;
});
</code></pre>
<h2 id="动态开启">动态开启</h2>
<p>项目中可以使用 npm script 编辑启动命令，通过环境变量来控制是否加载 Mock 服务。</p>
<p>以 <a href="https://cli.vuejs.org/zh/guide/mode-and-env.html">Vue CLI</a> 为例，在 <code>development</code> 模式下，增加 Mock 服务的启动命令：</p>
<p><strong>新增 serve:mock</strong></p>
<pre><code class="language-json">// in package.json
{
    &quot;scripts&quot;: {
        &quot;serve&quot;: &quot;vue-cli-service serve&quot;,
        &quot;serve:mock&quot;: &quot;vue-cli-service serve --mode mock&quot;,
        &quot;build&quot;: &quot;vue-cli-service build&quot;,
        &quot;lint&quot;: &quot;vue-cli-service lint&quot;
    } 
},
</code></pre>
<p><strong>新建 .env.mock 文件</strong></p>
<pre><code>NODE_ENV=development
VUE_APP_MOCK=true
</code></pre>
<p><strong>判断环境变量是否启用 Mock 服务</strong></p>
<pre><code class="language-js">// in src/mock/index.js
import Mock from &quot;mockjs&quot;;

if (
  process.env.NODE_ENV === &quot;development&quot; &amp;&amp;
  process.env.VUE_APP_MOCK === &quot;true&quot;
) {
    // your mock code
}
</code></pre>
<p>此时当你运行 <code>$ npm run serve</code>，Mock 服务未启用，请求 API 服务；当你运行 <code>$ npm run serve:mock</code>，Mock 服务启用，Ajax 请求被拦截。</p>
<h2 id="结语">结语</h2>
<p><a href="https://github.com/resyin/mockjs-usage">示例代码</a>，欢迎一起玩耍。</p>
]]></content>
    </entry>
</feed>